// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String  @id @default(cuid())
  parentID String?

  name               String
  url                String  @unique
  iconUrl            String?
  iconSize           Int[]
  Category_Option    Category_OptionSet[]
  Category_SpecGroup Category_SpecGroup[]
  products           Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([url])
}

model Category_OptionSet {
  id String @id @default(cuid())

  option     OptionSet @relation(fields: [optionID], references: [id], onDelete: Cascade)
  optionID   String
  category   Category  @relation(fields: [categoryID], references: [id])
  categoryID String

  @@unique([optionID, categoryID])
}

model OptionSet {
  id              String               @id @default(cuid())
  name            String
  options         Json // PostgreSQL JSON type for flexibility
  type            OptionSetType
  Category_Option Category_OptionSet[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Remove the NameValue type as we're using JSON now

model Category_SpecGroup {
  id String @id @default(cuid())

  specGroup   SpecGroup @relation(fields: [specGroupID], references: [id], onDelete: Cascade)
  specGroupID String
  category    Category  @relation(fields: [categoryID], references: [id])
  categoryID  String

  @@unique([specGroupID, categoryID])
}

model SpecGroup {
  id                 String               @id @default(cuid())
  title              String
  specs              String[]
  Category_SpecGroup Category_SpecGroup[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OptionSetType {
  TEXT
  COLOR
}

model Product {
  id              String        @id @default(cuid())
  name            String
  isAvailable     Boolean       @default(true)
  desc            String?
  specialFeatures String[]
  images          String[]
  category        Category      @relation(fields: [categoryID], references: [id])
  categoryID      String
  optionSets      String[] // Array of option set IDs
  price           Float
  salePrice       Float?
  specs           Json? // PostgreSQL JSON for product specifications
  brand           Brand         @relation(fields: [brandID], references: [id])
  brandID         String
  PageVisit       PageVisit[]
  
  // Search-related fields
  searchVector    String? // For full-text search
  sku             String? @unique
  stock           Int?    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([categoryID])
  @@index([brandID])
  @@index([price])
  @@index([isAvailable])
  @@index([sku])
}

// Remove ProductSpec type as we're using JSON

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  logoUrl  String?
  products Product[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model PageVisit {
  id               String    @id @default(cuid())
  time             DateTime  @default(now())
  pageType         PageType
  pagePath         String?
  deviceResolution String?
  productID        String?
  product          Product?  @relation(fields: [productID], references: [id])
  
  @@index([time])
  @@index([pageType])
}

enum PageType {
  MAIN
  LIST
  PRODUCT
}

// ---------------------- USER MANAGEMENT SECTION ---------------------- 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

// ---------------------- SEARCH FUNCTIONALITY ---------------------- 
model SearchLog {
  id        String   @id @default(cuid())
  query     String
  results   Int      @default(0)
  userId    String?
  timestamp DateTime @default(now())

  @@index([query])
  @@index([timestamp])
}
